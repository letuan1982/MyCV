import emailjs from '@emailjs/browser'
import React, { useState } from 'react'
import PhoneInput from 'react-phone-input-2'
import 'react-phone-input-2/lib/style.css'

const ContactForm: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false) // Tr·∫°ng th√°i m·ªü/t·∫Øt Form
  const [formData, setFormData] = useState({
    companyName: '',
    address: '',
    email: '',
    phone: '',
    website: '',
    position: '',
    message: '',
  })
  const [emailError, setEmailError] = useState<string | null>(null) // L∆∞u l·ªói email
  const [isChecked, setIsChecked] = useState(false) // Tr·∫°ng th√°i c·ªßa checkbox

  // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
  const validateEmail = (email: string) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return regex.test(email)
  }

  // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi input
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  ) => {
    if (e.target.name === 'email') {
      const isValid = validateEmail(e.target.value)
      setEmailError(
        isValid ? null : 'Email kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.',
      )
    }
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  // X·ª≠ l√Ω thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i
  const handlePhoneChange = (value: string) => {
    setFormData({ ...formData, phone: value })
  }

  // X·ª≠ l√Ω g·ª≠i form
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault() // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form

    // Ki·ªÉm tra email h·ª£p l·ªá
    if (!validateEmail(formData.email)) {
      setEmailError('Email kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.')
      return
    }

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a t√≠ch v√†o checkbox
    if (!isChecked) {
      alert('Vui l√≤ng x√°c nh·∫≠n th√¥ng tin tr∆∞·ªõc khi g·ª≠i.')
      return
    }

    emailjs
      .send(
        'service_5hfmo89', // Service ID c·ªßa b·∫°n
        'template_4h9dj65', // Template ID c·ªßa b·∫°n
        formData,
        'cgTDJu6SL47uLo9Dt', // Public Key c·ªßa b·∫°n
      )
      .then(() => {
        alert('Th√¥ng tin ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! ‚úÖ')
        setIsOpen(false) // ƒê√≥ng form sau khi g·ª≠i
      })
      .catch((error) => {
        console.error('L·ªói khi g·ª≠i email:', error)
        alert('G·ª≠i th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i sau. ‚ùå')
      })
  }

  return (
    <div className="relative">
      <button
        className="fixed right-4 top-[75vh] text-white p-4 rounded-full shadow-lg hover:bg-orange-600 transition blink-animation"
        onClick={() => setIsOpen(!isOpen)}
      >
        üì© Li√™n h·ªá ngay
      </button>

      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-xl w-[420px] relative z-50">
            <h2 className="text-xl font-bold text-orange-600 mb-4 text-center">
              Form Li√™n H·ªá Nh√† Tuy·ªÉn D·ª•ng
            </h2>
            <form className="space-y-3" onSubmit={handleSubmit}>
              <input
                type="text"
                name="companyName"
                placeholder="ƒê∆°n v·ªã tuy·ªÉn d·ª•ng"
                value={formData.companyName}
                onChange={handleChange}
                className="w-full border p-2 rounded"
                required
              />
              <input
                type="text"
                name="address"
                placeholder="ƒê·ªãa ch·ªâ"
                value={formData.address}
                onChange={handleChange}
                className="w-full border p-2 rounded"
                required
              />
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={formData.email}
                onChange={handleChange}
                className={`w-full border p-2 rounded ${emailError ? 'border-red-500' : ''}`}
                required
              />
              {emailError && (
                <p className="text-red-500 text-xs">{emailError}</p>
              )}

              {/* Input s·ªë ƒëi·ªán tho·∫°i c√≥ m√£ v√πng qu·ªëc gia (full width) */}
              <PhoneInput
                country={'vn'} // Qu·ªëc gia m·∫∑c ƒë·ªãnh l√† Vi·ªát Nam
                value={formData.phone}
                onChange={handlePhoneChange}
                inputClass="!w-full border p-2 rounded" // Th√™m ! ƒë·ªÉ ƒë·∫£m b·∫£o full-width
                containerClass="!w-full" // Th√™m ! ƒë·ªÉ ghi ƒë√® CSS m·∫∑c ƒë·ªãnh
                buttonClass="!bg-gray-200" // ƒê·∫£m b·∫£o n√∫t ch·ªçn m√£ v√πng kh√¥ng b·ªã nh·ªè l·∫°i
              />

              <input
                type="text"
                name="website"
                placeholder="Website (n·∫øu c√≥)"
                value={formData.website}
                onChange={handleChange}
                className="w-full border p-2 rounded"
              />
              <input
                type="text"
                name="position"
                placeholder="V·ªã tr√≠ c·∫ßn tuy·ªÉn d·ª•ng"
                value={formData.position}
                onChange={handleChange}
                className="w-full border p-2 rounded"
                required
              />
              <textarea
                name="message"
                placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)"
                value={formData.message}
                onChange={handleChange}
                className="w-full border p-2 rounded"
              />

              {/* Checkbox x√°c nh·∫≠n ƒëi·ªÅu kho·∫£n */}
              <div className="mt-3 flex items-center">
                <input
                  type="checkbox"
                  id="agree"
                  checked={isChecked}
                  onChange={() => setIsChecked(!isChecked)}
                  className="w-5 h-5 mr-2"
                />
                <label htmlFor="agree" className="text-sm">
                  T√¥i x√°c nh·∫≠n{' '}
                  <a href="/terms" className="text-blue-600 hover:underline">
                    c√°c th√¥ng tin tr√™n l√† ch√≠nh x√°c
                  </a>
                  .
                </label>
              </div>

              <div className="flex justify-between mt-2">
                <button
                  type="submit"
                  className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600"
                >
                  G·ª≠i
                </button>
                <button
                  type="button"
                  onClick={() => setIsOpen(false)}
                  className="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600"
                >
                  ƒê√≥ng
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

export default ContactForm
